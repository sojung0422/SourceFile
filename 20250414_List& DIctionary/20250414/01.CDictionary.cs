/****************************************
 [HashTable]
 - 키와 값을 쌍으로 저장하는 자료구조
 - 키를 해시함수에 의해 계산된 해시 코드로 변환하여 데이터를 저장하고 검색하므로 빠른 검색 속도를 제공
 

[키 - 값]
 -  각 키는 유일해야함. 키를 통해 빠르게 값을 조회

[해시 함수]
 - 키를 해시코드로 변환하여 인덱스를 계산. 빠른 데이터 접근을 가능하게 함.
 - 키 값을 해싱하여 고유한 인덱스를 만드는 함수
 조건 : 하나의 키값을 해싱하는 경우 반드시 항상 같은 인덱스를 반환해야함.

효율 : 1. 해시함수 과정이 빠를수록 좋음
       2. 해시함수의 결과 index의 분산이 클수록 좋음
      3. 해시함수의 결과가 충돌이 적을수록 좋음

[해시테이블 구현]
 - 데이터를 담을 테이블을 이미 크게 확보해 놓은 후
 - 입력받은 키를 해싱하여 테이블 고유한 index를 계산하고 데이터를 담아 보관


[해시테이블의 주의점 - 충돌]
 - 해시함수가 서로 다른 입력값에 대해 동일한 해시테이블 주소를 반환하는것.
 - 모든 입력값에 대해 고유한 해시 값을 만드는것은 불가능. ->충돌을 피할수 없음

[충돌 해결방안 - 체이닝]
 -  해시충돌이 발생하면 연결리스트로 데이터들을 연결하는 방식
- 장점 :  해시 테이블 자료상승률에 따른 성능저하가 적음
- 단점 : 해시테이블 외 추가적인 저장공간이 필요. 삽입삭제시 오버헤드가 발생

[충돌 해결방안 - 개방주소법]
- 해시 충돌이 발생하면 다른 빈 공간에 데이터를 삽입하는 방식
- 해시 충돌시 선형탐색, 제곱탐색, 이중해시 등을 통해 다른 빈 공간을 선정  
- 장점 :  추가적인 저장공간이 필요하지 않음. 삽입삭제시 오버헤드가 적음

- 해시 테이블의 공간 사용률이 높을 경우 급격한 성능저하가 발생
- 만약 이런 경우가 발생이 되면 재해싱을 통해 공간 사용률을 낮추어 다시 효율을 확보함.
- 재해싱 : 해시테이블의 크기를 늘리고 테이블 내의 모든 데이터를 다시 해싱해서 보관





[Dictionary]
- 키, 값을 쌍으로 저장
- 빠른 검색, 추가, 삭제가 가능하며 키는 중복될수 없고 각 키는 하나의 값과 연결

[Dictionary 의 메서드]
Add :  키-값 추가
ContainsKey :                       키 존재 여부 확인
ContainsValue :                     값 존재 여부 확인
TryGetValue :                       안전한 값 조회
Remove :                            키 삭제
Clear :                             모든 요소 삭제
count :                             요소 갯수 확인

 ****************************************/
namespace _20250414
{
    
    internal class _01
    {
        static void Main()
        {
            //딕셔너리 생성
            Dictionary<int, string> players = new Dictionary<int, string>();

            //딕셔너리에 요소 추가
                        //key, Value
            players.Add(1, "전사");
            players.Add(2, "마법사");
            players.Add(3, "도적");

            Console.WriteLine($"ID 1: {players[1]}");

            if(players.ContainsKey(2))
            {
                Console.WriteLine("있음");
            }

            players[3] = "궁수";
            players.Remove(1);

            foreach (var item in players)
            {
                Console.WriteLine($"{item.Key} : {item.Value}");
            }
        }
    }
}
